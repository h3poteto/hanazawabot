// Code generated by go-bindata.
// sources:
// cmd/migrate/serifs.sql
// cmd/migrate/serifs.sql~
// cmd/migrate/tweets.sql
// cmd/migrate/tweets.sql~
// cmd/migrate/users.sql
// cmd/migrate/users.sql~
// cmd/migrate/youtube_movie_favs.sql
// cmd/migrate/youtube_movie_favs.sql~
// cmd/migrate/youtube_movie_retweets.sql
// cmd/migrate/youtube_movie_retweets.sql~
// cmd/migrate/youtube_movies.sql
// cmd/migrate/youtube_movies.sql~
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdMigrateSerifsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\xc1\x6a\xeb\x30\x10\x45\xf7\xfa\x8a\x59\xda\xe0\x8d\x1f\x2f\x50\x28\x59\xa8\xce\x84\x8a\xca\xb2\x2b\x8f\xa0\x59\x09\xc5\x52\x5a\x41\x9d\x06\x59\x29\xf4\xef\x4b\x5a\x4c\x20\x5d\x0e\xe7\xcc\xcc\xbd\x8d\x46\x4e\x08\xc4\x1f\x24\x82\xd8\x82\xea\x08\xf0\x45\x0c\x34\xc0\x1c\x52\x3c\xcc\x50\xb0\xe8\x21\x1e\x73\x51\xd7\xe5\x0f\x56\x46\x4a\xe0\x86\x3a\x2b\x54\xa3\xb1\x45\x45\x15\xdb\x7f\xf8\x2f\xf8\x74\x69\x7c\x73\xa9\xf8\xb7\x5a\x95\x60\x94\x78\x36\x08\x1b\xdc\x72\x23\x7f\xb7\x2a\x36\xa6\xe0\x72\xf0\xd6\x65\xf0\x2e\x87\x1c\xa7\x70\x63\x9c\x4f\x7e\x31\x2e\x74\xce\x6e\x3a\x5d\xdf\x2e\x6e\x63\xb4\x46\x45\x96\x44\x8b\x03\xf1\xb6\x87\x4e\x81\xe9\x37\x97\x2e\x7f\x58\xc5\x7a\x2d\x5a\xae\x77\xf0\x84\x3b\x28\xa2\x2f\xcb\x9b\xfc\xeb\xfa\x7a\xf9\x91\xeb\x01\x69\x7d\xce\x87\xbb\x69\xff\x1f\x9a\x4e\x4a\x4e\xb8\xcc\xf6\x35\x1c\x43\x72\xef\x76\x8c\xf7\xec\x3b\x00\x00\xff\xff\xb0\xbc\x58\x85\x3d\x01\x00\x00")

func cmdMigrateSerifsSqlBytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateSerifsSql,
		"cmd/migrate/serifs.sql",
	)
}

func cmdMigrateSerifsSql() (*asset, error) {
	bytes, err := cmdMigrateSerifsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/serifs.sql", size: 317, mode: os.FileMode(436), modTime: time.Unix(1479177483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateSerifsSql2 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdMigrateSerifsSql2Bytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateSerifsSql2,
		"cmd/migrate/serifs.sql~",
	)
}

func cmdMigrateSerifsSql2() (*asset, error) {
	bytes, err := cmdMigrateSerifsSql2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/serifs.sql~", size: 0, mode: os.FileMode(436), modTime: time.Unix(1479177296, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateTweetsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\x3d\xda\xe0\xc3\x9f\xf0\x07\x0a\x25\x07\xc5\xd9\xb4\xa2\xb2\x1c\x64\x19\x9a\x93\x50\x2c\xd5\x15\xd4\x6a\xb0\xe5\xf6\xf5\x8b\xd3\xba\x86\xf4\xb8\xcc\x37\x33\x3b\xb9\x44\xaa\x10\x14\xdd\x71\x04\x76\x00\x51\x2a\xc0\x67\x56\xa9\x0a\xe2\xa7\x73\x71\x80\x84\x78\x0b\x3e\xc4\x64\xb5\x4a\xaf\xb2\xa8\x39\x07\x5a\xab\x52\x33\x91\x4b\x2c\x50\xa8\x8c\x8c\x83\xeb\xf5\x02\x66\xe4\xea\x86\x0f\xd3\x37\xaf\xa6\x4f\xd6\x9b\x4d\x0a\x7b\x3c\xd0\x9a\x7f\x07\xfc\x00\x93\xe5\xec\xdb\xc9\xb5\xfe\x97\xc2\x18\x06\xdf\x06\x67\x7f\x7b\x32\xd2\xf4\xce\x44\x67\xb5\x89\x60\x4d\x74\xd1\x77\xee\x26\x68\xbc\xd8\x99\x98\xd4\x21\x9a\xee\xb2\x3c\x3a\xb3\x79\x2d\x25\x0a\xa5\x15\x2b\xb0\x52\xb4\x38\x42\x29\xa0\x3e\xee\xa7\xf5\x7f\xb4\x8c\x1c\x25\x2b\xa8\x3c\xc1\x13\x9e\x20\xf1\x36\x4d\x01\xc5\x03\x13\xb8\x65\x21\xbc\xef\x77\x37\xfb\xb7\xab\xa5\xe7\x91\xca\x0a\xd5\x76\x8c\x2f\x77\xdd\xf9\x3f\xe4\x25\xe7\x54\xe1\x7c\xeb\xd6\x05\xd7\x9b\x37\xdd\xf8\x7b\xf2\x15\x00\x00\xff\xff\x61\x26\xeb\x88\x7d\x01\x00\x00")

func cmdMigrateTweetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateTweetsSql,
		"cmd/migrate/tweets.sql",
	)
}

func cmdMigrateTweetsSql() (*asset, error) {
	bytes, err := cmdMigrateTweetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/tweets.sql", size: 381, mode: os.FileMode(436), modTime: time.Unix(1479177556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateTweetsSql2 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdMigrateTweetsSql2Bytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateTweetsSql2,
		"cmd/migrate/tweets.sql~",
	)
}

func cmdMigrateTweetsSql2() (*asset, error) {
	bytes, err := cmdMigrateTweetsSql2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/tweets.sql~", size: 0, mode: os.FileMode(436), modTime: time.Unix(1479177498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateUsersSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcf\x51\x4b\xc3\x30\x10\x07\xf0\xf7\x7e\x8a\x7b\x6c\x61\x0f\x6e\x38\x10\x64\x0f\x59\x77\xd3\x60\x9a\x8e\x34\x05\xf7\x14\xb2\xe6\x9c\x01\x1b\x47\x9a\xea\xd7\x97\x0a\x75\x30\x1f\x8f\xff\xef\xb8\xfb\x97\x0a\x99\x46\xd0\x6c\x2b\x10\xf8\x1e\x64\xad\x01\x5f\x79\xa3\x1b\x18\x07\x8a\x03\xe4\x99\x77\xe0\x43\xca\x97\xcb\xe2\x37\x95\xad\x10\xc0\x5a\x5d\x1b\x2e\x4b\x85\x15\x4a\xbd\xc8\xd2\xb7\x4f\x89\xa2\xf1\x0e\x4e\xfe\x3c\xf1\xd5\x5d\x01\x63\x18\xfc\x39\x90\xfb\xdb\x5b\x64\x43\x17\x89\x82\x09\xb6\x27\xf8\xb2\xb1\x7b\xb7\x31\x5f\xad\xd7\x05\xec\x70\xcf\x5a\x31\xb3\x2e\x92\x4d\xe4\x8c\x4d\xe0\x6c\xa2\xe4\x7b\xba\x11\xe3\xc5\xcd\x62\x4a\x87\x64\xfb\xcb\xf5\xbf\xd9\x96\xad\x52\x28\xb5\xd1\xbc\xc2\x46\xb3\xea\x00\xb5\x84\xf6\xb0\x9b\x3a\xff\xcb\x16\xd9\x41\xf1\x8a\xa9\x23\xbc\xe0\x11\x72\xef\x8a\x02\x50\x3e\x71\x89\x1b\x1e\xc2\xe7\x6e\x7b\x53\x7b\xb3\xbc\xde\x79\x66\xaa\x41\xbd\x19\xd3\xdb\x43\x7f\xba\x87\xb2\x16\x82\x69\x9c\x67\x73\xa6\x40\xd1\x7e\x98\xce\x3f\x66\x3f\x01\x00\x00\xff\xff\xc3\xb1\xd7\xf7\x73\x01\x00\x00")

func cmdMigrateUsersSqlBytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateUsersSql,
		"cmd/migrate/users.sql",
	)
}

func cmdMigrateUsersSql() (*asset, error) {
	bytes, err := cmdMigrateUsersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/users.sql", size: 371, mode: os.FileMode(436), modTime: time.Unix(1479177476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateUsersSql2 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdMigrateUsersSql2Bytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateUsersSql2,
		"cmd/migrate/users.sql~",
	)
}

func cmdMigrateUsersSql2() (*asset, error) {
	bytes, err := cmdMigrateUsersSql2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/users.sql~", size: 0, mode: os.FileMode(436), modTime: time.Unix(1479177416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateYoutube_movie_favsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x41\x6b\x84\x30\x14\x84\xef\xf9\x15\xef\xa8\xe0\x45\xe8\xa1\x50\x3c\x64\xf5\x6d\x1b\x1a\xa3\xc4\x27\x74\x4f\x21\xbb\x66\x4b\xa0\xea\xa2\x71\xa1\xff\xbe\x6c\x8b\xd8\x76\x8f\xc3\xf7\x31\xc3\xe4\x1a\x39\x21\x10\xdf\x49\x04\xb1\x07\x55\x11\xe0\x9b\x68\xa8\x81\xcf\x71\x09\xcb\xd1\x99\x7e\xbc\x7a\x67\xce\xf6\x3a\x43\xc4\x7c\x07\x7e\x08\x51\x9a\xc6\xdf\xaa\x6a\xa5\x04\xde\x52\x65\x84\xca\x35\x96\xa8\x28\x61\xcb\xec\x26\xb3\x89\x09\xfb\xdb\xf4\x9b\x9c\x26\x67\x83\xeb\x8c\x0d\xd0\xd9\xe0\x82\xef\x1d\x14\xb8\xe7\xad\xfc\xe9\x4e\xd8\x72\xe9\x56\xe3\x46\xe7\x60\xfb\xcb\x36\xbd\xba\x79\xab\x35\x2a\x32\x24\x4a\x6c\x88\x97\x35\x54\x0a\xda\xba\xb8\x7d\xbb\x63\x09\xab\xb5\x28\xb9\x3e\xc0\x2b\x1e\x20\xf2\x5d\x1c\x03\xaa\x67\xa1\x30\x13\xc3\x30\x16\xbb\x7f\x8f\xb2\x74\xdb\x79\xe1\xba\x41\xca\x96\x70\x7e\xec\x8f\x0f\x90\x57\x52\x72\xc2\x35\x9b\x77\x37\xb8\xc9\x7e\x98\x93\x7f\x62\x5f\x01\x00\x00\xff\xff\xa1\xcc\x9d\x87\x5b\x01\x00\x00")

func cmdMigrateYoutube_movie_favsSqlBytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateYoutube_movie_favsSql,
		"cmd/migrate/youtube_movie_favs.sql",
	)
}

func cmdMigrateYoutube_movie_favsSql() (*asset, error) {
	bytes, err := cmdMigrateYoutube_movie_favsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/youtube_movie_favs.sql", size: 347, mode: os.FileMode(436), modTime: time.Unix(1479177618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateYoutube_movie_favsSql2 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdMigrateYoutube_movie_favsSql2Bytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateYoutube_movie_favsSql2,
		"cmd/migrate/youtube_movie_favs.sql~",
	)
}

func cmdMigrateYoutube_movie_favsSql2() (*asset, error) {
	bytes, err := cmdMigrateYoutube_movie_favsSql2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/youtube_movie_favs.sql~", size: 0, mode: os.FileMode(436), modTime: time.Unix(1479177578, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateYoutube_movie_retweetsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\xcd\x6a\x84\x30\x14\x85\xf7\x79\x8a\xbb\x1c\xc1\x8d\xd0\x45\xa1\xb8\xc8\xe8\x9d\x36\x34\x46\x89\x57\xe8\xac\x82\x33\xde\x96\x40\xd5\x41\x63\x4b\xdf\xbe\x4c\x8b\xd8\x9f\xe5\xe1\xfb\x38\x87\x93\x59\x94\x84\x40\x72\xaf\x11\xd4\x01\x4c\x49\x80\x4f\xaa\xa6\x1a\x3e\xc6\x25\x2c\x27\x76\xfd\xf8\xe6\xd9\x4d\x1c\xde\x99\xc3\x0c\x3b\xe1\x3b\xf0\x43\xd8\x25\x49\xf4\xa5\x9b\x46\x6b\x90\x0d\x95\x4e\x99\xcc\x62\x81\x86\x62\xb1\xcc\x3c\xb9\x4d\x8c\xc5\xef\xb6\x9f\xe4\x3c\x71\x1b\xb8\x73\x6d\x80\xae\x0d\x1c\x7c\xcf\x90\xe3\x41\x36\xfa\xbb\x3b\x16\xcb\xa5\x5b\x8d\x2b\x9d\x43\xdb\x5f\xb6\xe9\xd5\xcd\x1a\x6b\xd1\x90\x23\x55\x60\x4d\xb2\xa8\xa0\x34\xd0\x54\xf9\xf5\xdf\x3f\x16\x8b\xca\xaa\x42\xda\x23\x3c\xe2\x11\x76\xbe\x8b\x22\x40\x73\xaf\x0c\xa6\x6a\x18\xc6\x7c\xff\xe7\x51\x9a\x6c\x3b\x0f\xd2\xd6\x48\xe9\x12\x9e\x6f\xfb\xd3\x0d\x64\xa5\xd6\x92\x70\xcd\xee\x85\x07\x9e\xda\x57\x77\xf6\x77\xe2\x33\x00\x00\xff\xff\x9f\x05\xf7\x08\x5f\x01\x00\x00")

func cmdMigrateYoutube_movie_retweetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateYoutube_movie_retweetsSql,
		"cmd/migrate/youtube_movie_retweets.sql",
	)
}

func cmdMigrateYoutube_movie_retweetsSql() (*asset, error) {
	bytes, err := cmdMigrateYoutube_movie_retweetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/youtube_movie_retweets.sql", size: 351, mode: os.FileMode(436), modTime: time.Unix(1479177702, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateYoutube_movie_retweetsSql2 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdMigrateYoutube_movie_retweetsSql2Bytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateYoutube_movie_retweetsSql2,
		"cmd/migrate/youtube_movie_retweets.sql~",
	)
}

func cmdMigrateYoutube_movie_retweetsSql2() (*asset, error) {
	bytes, err := cmdMigrateYoutube_movie_retweetsSql2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/youtube_movie_retweets.sql~", size: 0, mode: os.FileMode(436), modTime: time.Unix(1479177634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateYoutube_moviesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\x73\x4c\x20\x07\x2b\x16\x04\xe9\x61\x9b\x4e\x75\x31\xd9\xd4\xcd\x2e\xd8\xd3\xb2\xcd\xae\xba\xd0\x24\x25\x99\x14\xfb\xef\xa5\x95\xa2\xb6\x07\x8f\xc3\xfb\xe6\xbd\xc7\xcb\x24\x32\x85\xa0\xd8\x3c\x47\xe0\x4b\x10\xa5\x02\x7c\xe5\x95\xaa\xe0\xd0\x8d\x34\x6e\xbc\x69\xba\x7d\xf0\x03\xc4\x51\x70\x10\x5a\x8a\x27\x93\xe4\x84\x09\x9d\xe7\xc0\xb4\x2a\x0d\x17\x99\xc4\x02\x85\x4a\x23\x0a\xb4\xf5\xb0\xb7\x7d\xfd\x61\xfb\xf8\x76\x3a\x4d\x60\x81\x4b\xa6\xf3\x6f\x3e\x8d\x4e\x6e\x26\xb8\xbf\x8c\x16\xfc\x45\xe3\x05\xea\xfc\x50\xf7\x61\x47\xa1\x6b\x81\xfc\x27\xa5\xd1\x38\x78\x07\x14\xda\xc3\xa9\xc7\xaf\x1a\xe7\xc7\x9b\x34\x72\x61\xb0\x9b\xed\xff\x5c\xdd\x7b\x4b\xde\x19\x4b\xe0\x2c\x79\x0a\x8d\xbf\xc8\x1f\x77\xee\x4c\x1c\xd5\x81\x6c\xb3\xbb\xb6\xca\xb4\x94\x28\x94\x51\xbc\xc0\x4a\xb1\x62\x05\xa5\x00\xbd\x5a\x1c\x67\xbd\xd2\xd2\x68\x25\x79\xc1\xe4\x1a\x9e\x71\x0d\x71\x70\x49\x02\x28\x1e\xb9\xc0\x19\x6f\xdb\x6e\x31\xbf\x18\x74\x36\xf9\xc9\x79\x62\xb2\x42\x35\x1b\xe9\xed\xbe\xd9\xdc\x41\x56\xe6\x39\x53\x78\xbe\xcd\xbb\x6f\x7d\x6f\xb7\xa6\x0e\x0f\xd1\x57\x00\x00\x00\xff\xff\x62\x14\x3a\x53\xd6\x01\x00\x00")

func cmdMigrateYoutube_moviesSqlBytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateYoutube_moviesSql,
		"cmd/migrate/youtube_movies.sql",
	)
}

func cmdMigrateYoutube_moviesSql() (*asset, error) {
	bytes, err := cmdMigrateYoutube_moviesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/youtube_movies.sql", size: 470, mode: os.FileMode(436), modTime: time.Unix(1479145836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdMigrateYoutube_moviesSql2 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdMigrateYoutube_moviesSql2Bytes() ([]byte, error) {
	return bindataRead(
		_cmdMigrateYoutube_moviesSql2,
		"cmd/migrate/youtube_movies.sql~",
	)
}

func cmdMigrateYoutube_moviesSql2() (*asset, error) {
	bytes, err := cmdMigrateYoutube_moviesSql2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/migrate/youtube_movies.sql~", size: 0, mode: os.FileMode(436), modTime: time.Unix(1479145661, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/migrate/serifs.sql": cmdMigrateSerifsSql,
	"cmd/migrate/serifs.sql~": cmdMigrateSerifsSql2,
	"cmd/migrate/tweets.sql": cmdMigrateTweetsSql,
	"cmd/migrate/tweets.sql~": cmdMigrateTweetsSql2,
	"cmd/migrate/users.sql": cmdMigrateUsersSql,
	"cmd/migrate/users.sql~": cmdMigrateUsersSql2,
	"cmd/migrate/youtube_movie_favs.sql": cmdMigrateYoutube_movie_favsSql,
	"cmd/migrate/youtube_movie_favs.sql~": cmdMigrateYoutube_movie_favsSql2,
	"cmd/migrate/youtube_movie_retweets.sql": cmdMigrateYoutube_movie_retweetsSql,
	"cmd/migrate/youtube_movie_retweets.sql~": cmdMigrateYoutube_movie_retweetsSql2,
	"cmd/migrate/youtube_movies.sql": cmdMigrateYoutube_moviesSql,
	"cmd/migrate/youtube_movies.sql~": cmdMigrateYoutube_moviesSql2,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"migrate": &bintree{nil, map[string]*bintree{
			"serifs.sql": &bintree{cmdMigrateSerifsSql, map[string]*bintree{}},
			"serifs.sql~": &bintree{cmdMigrateSerifsSql2, map[string]*bintree{}},
			"tweets.sql": &bintree{cmdMigrateTweetsSql, map[string]*bintree{}},
			"tweets.sql~": &bintree{cmdMigrateTweetsSql2, map[string]*bintree{}},
			"users.sql": &bintree{cmdMigrateUsersSql, map[string]*bintree{}},
			"users.sql~": &bintree{cmdMigrateUsersSql2, map[string]*bintree{}},
			"youtube_movie_favs.sql": &bintree{cmdMigrateYoutube_movie_favsSql, map[string]*bintree{}},
			"youtube_movie_favs.sql~": &bintree{cmdMigrateYoutube_movie_favsSql2, map[string]*bintree{}},
			"youtube_movie_retweets.sql": &bintree{cmdMigrateYoutube_movie_retweetsSql, map[string]*bintree{}},
			"youtube_movie_retweets.sql~": &bintree{cmdMigrateYoutube_movie_retweetsSql2, map[string]*bintree{}},
			"youtube_movies.sql": &bintree{cmdMigrateYoutube_moviesSql, map[string]*bintree{}},
			"youtube_movies.sql~": &bintree{cmdMigrateYoutube_moviesSql2, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

